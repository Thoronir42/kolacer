package fontTester;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.font.TextLayout;

/**
 *
 * @author Stepan
 */
public class Testr extends javax.swing.JFrame {

    private final int MIN_SIZE = 14,
                      MAX_SIZE = 64;
    
    int fontSiz = 22;
    int smallFontSiz = 14;
    String testText = "Příliš žluťoučký kůň úpěl ďábelské ódy.";
    String[] fontFamilies;
    int fontIterator = 0;
    /**
     * Creates new form Testr
     */
    public Testr() {
        initComponents();
        fontFamilies = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        int key = evt.getKeyCode();
        switch(key){
            case 39: 
                fontIterator++;
                if(fontIterator >= fontFamilies.length)
                    fontIterator = 0;
                break;
            case 37: fontIterator--;
                if(fontIterator<=0)
                    fontIterator = fontFamilies.length - 1;
                break;
            case 38 /* up */: case 40 /* down */:
                int change = (39 - key)*2;
                fontSiz +=change;
                if(fontSiz > MAX_SIZE){
                    fontSiz = MAX_SIZE;
                } else if (fontSiz < MIN_SIZE) {
                    fontSiz = MIN_SIZE;
                }
                smallFontSiz = fontSiz * 7 / 11;
        }
        this.repaint();
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Testr().setVisible(true);
            }
        });
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        paint2((Graphics2D)g);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void paint2(Graphics2D g2) {
        String face = this.fontFamilies[fontIterator];
        Font f = new Font(face,Font.PLAIN, fontSiz);
        Font f2= new Font(face, Font.BOLD, smallFontSiz);
        TextLayout tl = new TextLayout(testText, f, g2.getFontRenderContext());
        float x = (this.getWidth() - tl.getAdvance())/2.f;
        float y = (this.getHeight() - tl.getAscent() - tl.getDescent())/2.f;
        tl.draw(g2, x, y);
        
        tl = new TextLayout(
                String.format("%d/%d: %s [size:%d-%d]",fontIterator, fontFamilies.length, face, fontSiz, smallFontSiz),
                f2, g2.getFontRenderContext()
                );
        y+= (tl.getAscent() + tl.getDescent())*1.2f;
        tl.draw(g2, x, y);
    }
}
